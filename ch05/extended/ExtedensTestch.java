package ch05.extended;

public class ExtedensTestch extends ExtendsTest {
	// ExtendsTest를 부모로 둔 자식 객체 -> extends + 부모클래스명을 기입하여 상속 진행
	// 클래스 상속
	// 현실에서 상속은 부모가 자식을 선택해서 물려주지만, 프로그램은 자식이 부모를 선택한다.
	// 자식 클래스를 선언할 때 어떤 부모 클래스를 상속 받을 것인지를 결정하고 선택된 부모 클래스는 extends 뒤에 기술한다.
	// 다른 언어와 달리 자바는 다중 상속을 허용하지 않는다.
	// 여러 개의 부모 클래스를 상속할 수 없다.
	// class 자식 클래스 extends 부모 클래스 1, 부모클래스2{}; 이런식은 불가능
	

	int field2;

	void method2() {
		// 실행문
	} // 메서드 종료

	public static void main(String[] args) {
		// 현실에서 상속(Inheritance)은 부모가 자식에게 물려주는 행위
		// 자식은 상속을 통해서 부모가 물려준 것을 자연스럽게 이용 가능
		// 객체 지향 프로그램에서도 부모 클래스의 멤버를 자식 클래스에게 물려줄 수 있다.
		// 부모 클래스를 상위 클래스, 자식 클래스를 하위 클래스/파생 클래스라고도 부른다.
		// 상속은 이미 잘 개발된 클래스를 재사용해서 새로운 클래스를 만들기 때문에 코드의 중복을 줄여준다.

		ExtedensTestch b = new ExtedensTestch(); // 객체 생성
		b.field1 = 10;
		b.method1();

		b.field2 = 20;
		b.method2();

		// 상속의 주의 사항 및 장점
		// 상속을 해도 부모 클래스의 모든 필드와 메서드를 물려 받는 것은 아니다.
		// 부모 클래스에서 private 접근 제한을 갖는 필드와 메서드는 상속 대상에서 제외된다.
		// 부모 클래스와 자식 클래스가 다른 패키지에 존재한다면 default 접근 제한을 갖는 필드와 메서드도 상속 대상에서 제외된다.
		// 상속을 이용하면 클래스의 수정을 최소화 시킬 수 있다.
		// 부모 클래스의 수정으로 모든 잣기 클래스들의 수정 효과를 가져오기 때문에 유지 보수 시간을 최소화 시켜준다.
		// 예를 들어 B, C가 클래스 A를 상속할 경우, A 필드와 메서드를 수정함으로써 B, C를 수정하지 않아도 수정된 A의 필드와 메서드를
		// 이용할 수 있다.
	}

} // 자식 클래스로 부모 객체를 활용한다.
